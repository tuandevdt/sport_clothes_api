const Comment = require('../model/model_comment');
const Product = require('../model/model_product');
const Order = require('../model/model_order');
const SaleProduct = require('../model/model_sale_product');
const mongoose = require("mongoose");
const { Types } = mongoose;

// H√ÄM PH·ª§: c·∫≠p nh·∫≠t rating trung b√¨nh v√†o Product ho·∫∑c SaleProduct
async function updateProductRating(productId, type = "normal") {

  //Truy v·∫•n t·∫•t c·∫£ comment c·ªßa m·ªôt s·∫£n ph·∫©m theo productId v√† type
  const comments = await Comment.find({
    productId: new Types.ObjectId(productId),
    type
  });

  //T√≠nh t·ªïng s·ªë review.
  const totalReviews = comments.length;

  //T√≠nh averageRating
  const averageRating = totalReviews > 0
    ? (comments.reduce((sum, c) => sum + (c.rating || 0), 0) / totalReviews).toFixed(1)
    : 0;

  //Ghi averageRating & totalReviews v·ªÅ document c·ªßa SaleProduct ho·∫∑c Product tu·ª≥ theo type
  let updated;
  if (type === "sale") {
    updated = await SaleProduct.findByIdAndUpdate(
      productId,
      { averageRating, totalReviews },
      { new: true }
    );
  } else {
    updated = await Product.findByIdAndUpdate(
      productId,
      { averageRating, totalReviews },
      { new: true }
    );
  }
  return updated;
}

// L·∫§Y CHI TI·∫æT S·∫¢N PH·∫®M K√àM COMMENT (t·ª± detect type)
exports.getProductDetailWithComments = async (req, res) => {
  try {

    //L·∫•y id t·ª´ URL, convert sang ObjectId
    const { id } = req.params;
    const objId = new Types.ObjectId(id);

    //Th·ª≠ t√¨m trong Product tr∆∞·ªõc. N·∫øu kh√¥ng c√≥, th·ª≠ trong SaleProduct. T·ª± x√°c ƒë·ªãnh type
    let product = await Product.findById(objId);
    let type = "normal";
    if (!product) {
      product = await SaleProduct.findById(objId);
      type = "sale";
    }

    console.log("üìå Query detail product:", { id, foundType: type, product: !!product });

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    //L·∫•y to√†n b·ªô comment c·ªßa s·∫£n ph·∫©m theo type
    const comments = await Comment.find({ productId: objId,  // ho·∫∑c saleProductId n·∫øu type === 'sale'
      type: type   })
      .populate({ path: "userId", select: "name avatar" })
      .sort({ createdAt: -1 });

    console.log("üìå Comments found:", comments.length);

    //T√≠nh l·∫°i averageRating t·ª´ t·∫≠p comment v·ª´a query
    const totalReviews = comments.length;
    const averageRating = totalReviews > 0
      ? (comments.reduce((sum, c) => sum + (c.rating || 0), 0) / totalReviews).toFixed(1)
      : 0;

    //Tr·∫£ v·ªÅ JSON: product, comments (ƒë√£ populate), averageRating √©p v·ªÅ Number (·ªü ƒë√¢y ƒë√£ x·ª≠ l√Ω string‚Üínumber), totalReviews v√† type
    res.json({
      product,
      comments,
      averageRating: Number(averageRating),
      totalReviews: comments.length,
      type
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


// TH√äM 1 COMMENT (c√≥ k√®m orderId)
exports.createComment = async (req, res) => {
  try {
    //L·∫•y c√°c d·ªØ li·ªáu t·ª´ body request
    const { orderId, productId, userId, type, rating, content } = req.body;

    if (!orderId) return res.status(400).json({ message: "orderId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

    //ƒê·∫£m b·∫£o ƒë∆°n h√†ng t·ªìn t·∫°i
    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong ƒë∆°n h√†ng kh√¥ng
    const item = order.items.find(i => {
      const prodId = i.id_product?._id || i.id_product;
      return prodId?.toString() === productId;
    });
    if (!item) return res.status(400).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong ƒë∆°n h√†ng" });

    // Ki·ªÉm tra s·∫£n ph·∫©m n√†y ƒë√£ ƒë∆∞·ª£c review ch∆∞a
    if (item.isReviewed) return res.status(400).json({ message: "S·∫£n ph·∫©m n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° r·ªìi" });

    // T·∫°o comment link t·ªõi product, user, order
    const newComment = new Comment({
      productId: new Types.ObjectId(productId),
      userId: new Types.ObjectId(userId),
      type,
      rating,
      content,
      order: orderId,
    });
    await newComment.save();

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng: g·∫Øn isReviewed = true cho item ƒë√£ review
    await Order.updateOne(
      { _id: orderId, "items.id_product": productId },
      { $set: { "items.$.isReviewed": true } }
    );

    // C·∫≠p nh·∫≠t rating trung b√¨nh
    await updateProductRating(productId, type);

    res.status(201).json({ message: "ƒê√°nh gi√° th√†nh c√¥ng", comment: newComment });

  } catch (error) {
    console.error("L·ªói khi t·∫°o comment:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};


// TH√äM NHI·ªÄU COMMENT (c√≥ k√®m orderId)
exports.createMultipleComments = async (req, res) => {
  console.log("üìå createMultipleComments", req.body);
  try {
    const { orderId, userId, reviews } = req.body;



    if (!orderId) return res.status(400).json({ message: "orderId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    if (!Array.isArray(reviews) || reviews.length === 0) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ ƒë√°nh gi√° n√†o ƒë∆∞·ª£c g·ª≠i" });
    }

    const savedComments = [];

    for (const review of reviews) {
      const { productId, type = "normal", rating, content } = review;

      // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong ƒë∆°n h√†ng kh√¥ng
      const item = order.items.find(i => {
        const prodId = i.id_product?._id || i.id_product;
        return prodId?.toString() === productId;
      });
      if (!item) continue;

      // N·∫øu s·∫£n ph·∫©m ƒë√£ review r·ªìi th√¨ b·ªè qua
      if (item.isReviewed) continue;

      // T·∫°o comment
      const newComment = new Comment({
        productId: new Types.ObjectId(productId),
        userId: new Types.ObjectId(userId),
        type,
        rating,
        content,
        order: orderId,
      });
      await newComment.save();
      savedComments.push(newComment);

      // ƒê√°nh d·∫•u s·∫£n ph·∫©m ƒë√£ review
      const objProductId = new Types.ObjectId(productId);
      await Order.updateOne(
        { _id: orderId, "items.id_product": objProductId },
        { $set: { "items.$.isReviewed": true } }
      );

      // C·∫≠p nh·∫≠t rating trung b√¨nh
      await updateProductRating(productId, type);
    }

    if (savedComments.length === 0) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ƒë√°nh gi√° (c√≥ th·ªÉ ƒë√£ ƒë√°nh gi√° tr∆∞·ªõc ƒë√≥)" });
    }

    res.status(201).json({ message: "ƒê√°nh gi√° th√†nh c√¥ng", comments: savedComments });
  } catch (error) {
    console.error("L·ªói khi t·∫°o nhi·ªÅu comment:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
