const { Router } = require("express");
const qs = require("querystring");
const crypto = require("crypto");
const moment = require("moment");
const Order = require('../model/model_order');
const Product = require('../model/model_product');
const SaleProduct = require('../model/model_sale_product');

const router = Router();

function sortObject(obj) {
  let sorted = {};
  let keys = Object.keys(obj).sort();
  keys.forEach((key) => {
    sorted[key] = obj[key];
  });
  return sorted;
}

// ‚úÖ T·∫°o link thanh to√°n VNPAY t·ª´ orderCode
// http://localhost:3002/vnpay/create_payment?orderCode=1234567899&amount=100000
router.get("/create_payment", async (req, res) => {
  const { orderCode, amount } = req.query;
  const tmnCode = "6P2DR0XB"; // L·∫•y t·ª´ VNPay .env
  const secretKey = "GET28K94GCVBQOGQO95ANEG9FF6PR4YL"; // L·∫•y t·ª´ VNPay

  const returnUrl = `${process.env.API_URL_CONFIG}:${process.env.PORT}/vnpay/payment-result`; // Trang k·∫øt qu·∫£
  const vnp_Url = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";

  let ipAddr = req.ip;
  let orderId = orderCode || moment().format("YYYYMMDDHHmmss");
  let bankCode = req.query.bankCode || "NCB";

  let createDate = moment().format("YYYYMMDDHHmmss");
  let orderInfo = `Thanh_toan_don_hang_${orderCode}`;
  let locale = req.query.language || "vn";
  let currCode = "VND";

  let vnp_Params = {
    vnp_Version: "2.1.0",
    vnp_Command: "pay",
    vnp_TmnCode: tmnCode,
    vnp_Locale: locale,
    vnp_CurrCode: currCode,
    vnp_TxnRef: orderId,
    vnp_OrderInfo: orderInfo,
    vnp_OrderType: "billpayment",
    vnp_Amount: amount * 100,
    vnp_ReturnUrl: returnUrl,
    vnp_IpAddr: ipAddr,
    vnp_CreateDate: createDate,
  };

  if (bankCode !== "") {
    vnp_Params["vnp_BankCode"] = bankCode;
  }

  vnp_Params = sortObject(vnp_Params);

  let signData = qs.stringify(vnp_Params);
  let hmac = crypto.createHmac("sha512", secretKey);
  let signed = hmac.update(new Buffer.from(signData, "utf-8")).digest("hex");
  vnp_Params["vnp_SecureHash"] = signed;

  let paymentUrl = vnp_Url + "?" + qs.stringify(vnp_Params);
  res.json({ paymentUrl });
});

// ‚úÖ T·∫°o ƒë∆°n h√†ng v√† link thanh to√°n VNPay (t√≠ch h·ª£p v·ªõi order controller)
router.post("/create_order_and_payment", async (req, res) => {
  try {
    const {
      userId,
      items,
      shippingFee = 0,
      voucher,
      paymentMethod,
      shippingAddress,
      order_code
    } = req.body;

    if (!userId || !items || !paymentMethod || !shippingAddress) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o ƒë∆°n h√†ng v·ªõi order_code:", order_code);

    // ‚úÖ T·∫°o ƒë∆°n h√†ng tr∆∞·ªõc
    const orderController = require('../controller/controller_order');
    const orderReq = { body: req.body };
    let orderData = null;
    let orderCreated = false;

    const orderRes = {
      status: (code) => ({
        json: (data) => {
          if (code === 201) {
            orderData = data.data;
            orderCreated = true;
            console.log("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", orderData.order_code);
          } else {
            console.error("‚ùå L·ªói t·∫°o ƒë∆°n h√†ng:", data);
            res.status(code).json(data);
          }
        }
      })
    };

    await orderController.createOrder(orderReq, orderRes);

    // ‚úÖ Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng kh√¥ng
    if (!orderCreated || !orderData) {
      return res.status(500).json({ 
        success: false,
        message: "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng" 
      });
    }

    // ‚úÖ ƒê·∫£m b·∫£o ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o DB tr∆∞·ªõc khi t·∫°o link thanh to√°n
    const savedOrder = await Order.findOne({ order_code: orderData.order_code });
    if (!savedOrder) {
      console.error("‚ùå ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c l∆∞u v√†o DB:", orderData.order_code);
      return res.status(500).json({ 
        success: false,
        message: "ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c l∆∞u v√†o database" 
      });
    }

    console.log("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o DB:", savedOrder.order_code);
    
    // ‚úÖ T·∫°o link thanh to√°n
    const finalTotal = orderData.finalTotal;
    const tmnCode = "6P2DR0XB";
    const secretKey = "GET28K94GCVBQOGQO95ANEG9FF6PR4YL";
    const returnUrl = `${process.env.API_URL_CONFIG}:${process.env.PORT}/vnpay/payment-result`;
    const vnp_Url = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";

    let ipAddr = req.ip;
    let orderId = order_code || orderData.order_code;
    let bankCode = req.body.bankCode || "NCB";

    let createDate = moment().format("YYYYMMDDHHmmss");
    let orderInfo = `Thanh_toan_don_hang_${orderId}`;
    let locale = req.body.language || "vn";
    let currCode = "VND";

    let vnp_Params = {
      vnp_Version: "2.1.0",
      vnp_Command: "pay",
      vnp_TmnCode: tmnCode,
      vnp_Locale: locale,
      vnp_CurrCode: currCode,
      vnp_TxnRef: orderId,
      vnp_OrderInfo: orderInfo,
      vnp_OrderType: "billpayment",
      vnp_Amount: finalTotal * 100,
      vnp_ReturnUrl: returnUrl,
      vnp_IpAddr: ipAddr,
      vnp_CreateDate: createDate,
    };

    if (bankCode !== "") {
      vnp_Params["vnp_BankCode"] = bankCode;
    }

    vnp_Params = sortObject(vnp_Params);

    let signData = qs.stringify(vnp_Params);
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(new Buffer.from(signData, "utf-8")).digest("hex");
    vnp_Params["vnp_SecureHash"] = signed;

    let paymentUrl = vnp_Url + "?" + qs.stringify(vnp_Params);
    
    console.log("‚úÖ T·∫°o link thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng:", orderId);
    
    res.json({ 
      success: true,
      message: "T·∫°o ƒë∆°n h√†ng v√† link thanh to√°n th√†nh c√¥ng",
      order: orderData,
      paymentUrl: paymentUrl
    });

  } catch (error) {
    console.error("‚ùå create_order_and_payment error:", error);
    res.status(500).json({ 
      success: false,
      message: "L·ªói khi t·∫°o ƒë∆°n h√†ng v√† link thanh to√°n", 
      error: error.message 
    });
  }
});

// ‚úÖ Nh·∫≠n k·∫øt qu·∫£ t·ª´ VNPAY (redirect)
// http://localhost:3002/vnpay/payment-result
router.get("/payment-result", async (req, res) => {
  const query = req.query;
  
  // ‚úÖ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu callback (fallback t·ª´ deeplink)
  if (!query.vnp_ResponseCode || Object.keys(query).length === 0) {
    console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu callback, c√≥ th·ªÉ l√† fallback t·ª´ deeplink");
    // Tr·∫£ v·ªÅ JSON thay v√¨ redirect ƒë·ªÉ FE c√≥ th·ªÉ x·ª≠ l√Ω
    return res.json({
      success: false,
      status: "no_data",
      message: "Kh√¥ng c√≥ th√¥ng tin thanh to√°n",
      data: null
    });
  }

  const secretKey = "GET28K94GCVBQOGQO95ANEG9FF6PR4YL";
  const vnp_SecureHash = query.vnp_SecureHash;

  delete query.vnp_SecureHash;
  const signData = qs.stringify(query);

  const hmac = crypto.createHmac("sha512", secretKey);
  const checkSum = hmac.update(signData).digest("hex");
  console.log("VNPay callback data:", query);

  if (vnp_SecureHash === checkSum) {
     const orderCode = query.vnp_OrderInfo.replace("Thanh_toan_don_hang_", "");
     console.log("üîç T√¨m ki·∫øm ƒë∆°n h√†ng v·ªõi order_code:", orderCode);
     
     // ‚úÖ Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi c·∫≠p nh·∫≠t
     const existingOrder = await Order.findOne({ order_code: orderCode });
     if (!existingOrder) {
       console.error("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi order_code:", orderCode);
       console.log("üìã Danh s√°ch ƒë∆°n h√†ng trong DB:");
       const allOrders = await Order.find({}, { order_code: 1, createdAt: 1 }).limit(10);
       console.log(allOrders);
       
       return res.redirect(`f7shop://payment-result?status=failed&message=OrderNotFound&orderId=${orderCode}`);
     }
     
     console.log("‚úÖ T√¨m th·∫•y ƒë∆°n h√†ng:", existingOrder.order_code, "Status:", existingOrder.status);
     
     if (query.vnp_ResponseCode === "00") {
       try {
         // ‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng t·ª´ order_code
         const updatedOrder = await Order.findOneAndUpdate(
           { order_code: orderCode }, 
           { 
             status: 'confirmed', 
             updated_at: new Date(),
             paymentStatus: 'completed',
             paymentMethod: 'vnpay',
             paymentDetails: {
               transactionId: query.vnp_TransactionNo,
               bankCode: query.vnp_BankCode,
               paymentTime: query.vnp_PayDate,
               amount: query.vnp_Amount / 100
             }
           },
           { new: true }
         );

         console.log("‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng:", orderCode);

         // ‚úÖ C·∫¨P NH·∫¨T T·ªíN KHO NGAY KHI THANH TO√ÅN TH√ÄNH C√îNG
         console.log(`üîÑ C·∫≠p nh·∫≠t t·ªìn kho cho ƒë∆°n h√†ng VNPay: ${orderCode}`);
         
         // Import helper function t·ª´ controller_order
         const orderController = require('../controller/controller_order');
         
         for (const item of updatedOrder.items) {
           // S·ª≠ d·ª•ng helper function ƒë·ªÉ c·∫≠p nh·∫≠t t·ªìn kho
           const success = await orderController.updateProductStock(item, 'decrease', 'VNPay');
           if (!success) {
             console.error(`‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t·ªìn kho cho s·∫£n ph·∫©m ID: ${item.id_product}`);
           }
         }

         // ‚úÖ G·ª≠i socket notification n·∫øu c√≥
         try {
           const io = req.app.get('io');
           if (io) {
             io.to(updatedOrder.userId.toString()).emit('orderStatusUpdated', {
               orderId: updatedOrder._id,
               status: 'confirmed',
               message: 'Thanh to√°n th√†nh c√¥ng'
             });
           }
         } catch (socketError) {
           console.log("Socket notification error:", socketError.message);
         }

         // ‚úÖ L∆∞u k·∫øt qu·∫£ thanh to√°n v√†o session/cache ƒë·ªÉ FE c√≥ th·ªÉ truy c·∫≠p
         const amount = query.vnp_Amount / 100;
         const paymentResult = {
           status: 'success',
           orderId: orderCode,
           amount: amount,
           transactionId: query.vnp_TransactionNo,
           timestamp: new Date().toISOString()
         };
         
         // L∆∞u v√†o global cache (c√≥ th·ªÉ thay b·∫±ng Redis trong production)
         if (!global.paymentResults) global.paymentResults = {};
         global.paymentResults[orderCode] = paymentResult;

         const deeplink = `f7shop://payment-result?status=success&orderId=${orderCode}&amount=${amount}&transactionId=${query.vnp_TransactionNo}`;
         
         // Redirect v·ªÅ deeplink v·ªõi th√¥ng tin th√†nh c√¥ng
         return res.send(`
          <html><body style="font-family:sans-serif;text-align:center;margin-top:50px">
            <h1 style="color:#16a34a; font-size: 36px;">‚úÖ Thanh to√°n th√†nh c√¥ng!</h1>
            <p style="font-size: 24px;">ƒê∆°n h√†ng #${orderCode} - S·ªë ti·ªÅn: ${amount.toLocaleString()} VND</p>
            <p"
               style="display:inline-block;margin-top:20px;padding:12px 24px;background:#0f766e;color:white;border-radius:8px;text-decoration:none;font-weight:bold">
              Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng
            </p>
            </body></html>
        `);
        //  return res.redirect(`f7shop://payment-result?status=success&orderId=${orderCode}&amount=${amount}&transactionId=${query.vnp_TransactionNo}`);
       } catch (updateError) {
         console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", updateError);
         return res.redirect(`f7shop://payment-result?status=failed&message=UpdateError&orderId=${orderCode}`);
       }
     } else {
       // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i
       try {
         await Order.findOneAndUpdate(
           { order_code: orderCode }, 
           { 
             status: 'Thanh to√°n th·∫•t b·∫°i', 
             updated_at: new Date(),
             paymentStatus: 'failed',
             paymentDetails: {
               errorCode: query.vnp_ResponseCode,
               errorMessage: query.vnp_Message || 'Thanh to√°n th·∫•t b·∫°i'
             }
           }
         );
       } catch (updateError) {
         console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i:", updateError);
       }

       // ‚úÖ L∆∞u k·∫øt qu·∫£ th·∫•t b·∫°i v√†o cache
       const paymentResult = {
         status: 'failed',
         orderId: orderCode,
         errorCode: query.vnp_ResponseCode,
         errorMessage: query.vnp_Message || 'Thanh to√°n th·∫•t b·∫°i',
         timestamp: new Date().toISOString()
       };
       
       if (!global.paymentResults) global.paymentResults = {};
       global.paymentResults[orderCode] = paymentResult;
       
       // ‚úÖ Redirect v·ªÅ deeplink v·ªõi th√¥ng tin th·∫•t b·∫°i
       return res.redirect(`f7shop://payment-result?status=failed&orderId=${orderCode}&errorCode=${query.vnp_ResponseCode}&errorMessage=${query.vnp_Message || 'Thanh to√°n th·∫•t b·∫°i'}`);
     }
   } else {
     // ‚úÖ Redirect v·ªÅ deeplink khi hash kh√¥ng h·ª£p l·ªá
     return res.redirect(`f7shop://payment-result?status=failed&message=InvalidHash`);
   }
});

// ‚úÖ Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n (API endpoint)
router.get("/check_payment", (req, res) => {
  const query = req.query;
  const secretKey = "GET28K94GCVBQOGQO95ANEG9FF6PR4YL";
  const vnp_SecureHash = query.vnp_SecureHash;

  delete query.vnp_SecureHash;
  const signData = qs.stringify(query);

  const hmac = crypto.createHmac("sha512", secretKey);
  const checkSum = hmac.update(signData).digest("hex");
  console.log(query);

  if (vnp_SecureHash === checkSum) {
    if (query.vnp_ResponseCode === "00") {
      res.json({ message: "Thanh to√°n th√†nh c√¥ng", data: query });
    } else {
      res.json({ message: "Thanh to√°n th·∫•t b·∫°i", data: query });
    }
  } else {
    res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
  }
});

// ‚úÖ API ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng (cho FE s·ª≠ d·ª•ng)
router.get("/check_order_status", async (req, res) => {
  try {
    const { order_code } = req.query;
    
    if (!order_code) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu order_code"
      });
    }

    const order = await Order.findOne({ order_code });
    
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        order_code: order_code
      });
    }

    res.json({
      success: true,
      order: {
        order_code: order.order_code,
        status: order.status,
        paymentStatus: order.paymentStatus,
        paymentMethod: order.paymentMethod,
        finalTotal: order.finalTotal,
        createdAt: order.createdAt,
        updated_at: order.updated_at,
        paymentDetails: order.paymentDetails
      }
    });

  } catch (error) {
    console.error("‚ùå check_order_status error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng",
      error: error.message
    });
  }
});

// ‚úÖ API l·∫•y k·∫øt qu·∫£ thanh to√°n t·ª´ cache (cho FE s·ª≠ d·ª•ng khi kh√¥ng c√≥ params)
router.get("/get_payment_result", async (req, res) => {
  try {
    const { order_code } = req.query;
    
    if (!order_code) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu order_code"
      });
    }

    // Ki·ªÉm tra trong cache tr∆∞·ªõc
    if (global.paymentResults && global.paymentResults[order_code]) {
      const cachedResult = global.paymentResults[order_code];
      console.log("‚úÖ T√¨m th·∫•y k·∫øt qu·∫£ trong cache:", cachedResult);
      
      // X√≥a kh·ªèi cache sau khi tr·∫£ v·ªÅ (ƒë·ªÉ tr√°nh memory leak)
      delete global.paymentResults[order_code];
      
      return res.json({
        success: true,
        data: cachedResult,
        source: "cache"
      });
    }

    // N·∫øu kh√¥ng c√≥ trong cache, ki·ªÉm tra database
    const order = await Order.findOne({ order_code });
    
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng",
        order_code: order_code
      });
    }

    // T·∫°o k·∫øt qu·∫£ t·ª´ database
    const result = {
      status: order.status === 'ƒê√£ thanh to√°n' ? 'success' : 'failed',
      orderId: order.order_code,
      amount: order.finalTotal,
      transactionId: order.paymentDetails?.transactionId,
      timestamp: order.updated_at?.toISOString()
    };

    if (order.status !== 'ƒê√£ thanh to√°n') {
      result.errorCode = order.paymentDetails?.errorCode;
      result.errorMessage = order.paymentDetails?.errorMessage;
    }

    res.json({
      success: true,
      data: result,
      source: "database"
    });

  } catch (error) {
    console.error("‚ùå get_payment_result error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y k·∫øt qu·∫£ thanh to√°n",
      error: error.message
    });
  }
});

// ‚úÖ Ki·ªÉm tra ƒë∆°n h√†ng trong database (debug endpoint)
router.get("/debug/orders", async (req, res) => {
  try {
    const { order_code } = req.query;
    
    if (order_code) {
      // T√¨m ƒë∆°n h√†ng c·ª• th·ªÉ
      const order = await Order.findOne({ order_code });
      if (order) {
        res.json({ 
          success: true, 
          order: {
            order_code: order.order_code,
            status: order.status,
            createdAt: order.createdAt,
            finalTotal: order.finalTotal
          }
        });
      } else {
        res.json({ 
          success: false, 
          message: `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi order_code: ${order_code}` 
        });
      }
    } else {
      // L·∫•y danh s√°ch 10 ƒë∆°n h√†ng g·∫ßn nh·∫•t
      const orders = await Order.find({}, { 
        order_code: 1, 
        status: 1, 
        createdAt: 1, 
        finalTotal: 1 
      })
      .sort({ createdAt: -1 })
      .limit(10);
      
      res.json({ 
        success: true, 
        orders: orders,
        total: orders.length
      });
    }
  } catch (error) {
    console.error("‚ùå Debug orders error:", error);
    res.status(500).json({ 
      success: false, 
      message: "L·ªói khi ki·ªÉm tra ƒë∆°n h√†ng", 
      error: error.message 
    });
  }
});

module.exports = router;