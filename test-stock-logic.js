// Test logic t·ªìn kho
const mongoose = require('mongoose');
const Product = require('./model/model_product');
const SaleProduct = require('./model/model_sale_product');
const Order = require('./model/model_order');

// K·∫øt n·ªëi database
mongoose.connect('mongodb://localhost:27017/your_database_name', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

async function testStockLogic() {
  try {
    console.log('üß™ B·∫Øt ƒë·∫ßu test logic t·ªìn kho...');

    // 1. T·∫°o s·∫£n ph·∫©m test
    const testProduct = new Product({
      name: 'S·∫£n ph·∫©m test',
      price: 100000,
      stock: 10,
      sold: 0,
      description: 'S·∫£n ph·∫©m test cho logic t·ªìn kho',
      images: ['test.jpg'],
      size: ['M'],
      colors: ['ƒêen'],
      categoryCode: 'test'
    });

    const savedProduct = await testProduct.save();
    console.log('‚úÖ T·∫°o s·∫£n ph·∫©m test:', savedProduct.name, 'Stock:', savedProduct.stock);

    // 2. T·∫°o ƒë∆°n h√†ng test
    const testOrder = new Order({
      userId: '507f1f77bcf86cd799439011', // ObjectId test
      items: [{
        id_product: savedProduct._id,
        name: savedProduct.name,
        purchaseQuantity: 3,
        price: savedProduct.price,
        images: savedProduct.images
      }],
      order_code: 'TEST001',
      totalPrice: 300000,
      shippingFee: 0,
      finalTotal: 300000,
      paymentMethod: 'vnpay',
      shippingAddress: {
        address: 'Test address',
        phone: '0123456789'
      },
      status: 'waiting'
    });

    const savedOrder = await testOrder.save();
    console.log('‚úÖ T·∫°o ƒë∆°n h√†ng test:', savedOrder.order_code);

    // 3. Test c·∫≠p nh·∫≠t t·ªìn kho
    console.log('üîÑ Test c·∫≠p nh·∫≠t t·ªìn kho...');
    
    // Gi·∫£ l·∫≠p thanh to√°n VNPay th√†nh c√¥ng
    const updatedOrder = await Order.findByIdAndUpdate(
      savedOrder._id,
      {
        status: 'confirmed',
        paymentStatus: 'completed',
        paymentMethod: 'vnpay'
      },
      { new: true }
    );

    // C·∫≠p nh·∫≠t t·ªìn kho
    for (const item of updatedOrder.items) {
      await Product.findByIdAndUpdate(item.id_product, {
        $inc: { 
          sold: item.purchaseQuantity,
          stock: -item.purchaseQuantity
        }
      });
    }

    // Ki·ªÉm tra k·∫øt qu·∫£
    const updatedProduct = await Product.findById(savedProduct._id);
    console.log('üìä K·∫øt qu·∫£ sau khi c·∫≠p nh·∫≠t t·ªìn kho:');
    console.log('   - Stock ban ƒë·∫ßu: 10');
    console.log('   - Stock hi·ªán t·∫°i:', updatedProduct.stock);
    console.log('   - Sold ban ƒë·∫ßu: 0');
    console.log('   - Sold hi·ªán t·∫°i:', updatedProduct.sold);
    console.log('   - ƒê√£ b√°n: 3');
    console.log('   - C√≤n l·∫°i: 7');

    if (updatedProduct.stock === 7 && updatedProduct.sold === 3) {
      console.log('‚úÖ Logic t·ªìn kho ho·∫°t ƒë·ªông ch√≠nh x√°c!');
    } else {
      console.log('‚ùå Logic t·ªìn kho c√≥ v·∫•n ƒë·ªÅ!');
    }

    // 4. Test h·ªßy ƒë∆°n h√†ng (ho√†n tr·∫£ t·ªìn kho)
    console.log('üîÑ Test h·ªßy ƒë∆°n h√†ng...');
    
    await Order.findByIdAndUpdate(
      savedOrder._id,
      { status: 'cancelled' }
    );

    // Ho√†n tr·∫£ t·ªìn kho
    for (const item of updatedOrder.items) {
      await Product.findByIdAndUpdate(item.id_product, {
        $inc: { 
          sold: -item.purchaseQuantity,
          stock: item.purchaseQuantity
        }
      });
    }

    const restoredProduct = await Product.findById(savedProduct._id);
    console.log('üìä K·∫øt qu·∫£ sau khi h·ªßy ƒë∆°n h√†ng:');
    console.log('   - Stock hi·ªán t·∫°i:', restoredProduct.stock);
    console.log('   - Sold hi·ªán t·∫°i:', restoredProduct.sold);

    if (restoredProduct.stock === 10 && restoredProduct.sold === 0) {
      console.log('‚úÖ Logic ho√†n tr·∫£ t·ªìn kho ho·∫°t ƒë·ªông ch√≠nh x√°c!');
    } else {
      console.log('‚ùå Logic ho√†n tr·∫£ t·ªìn kho c√≥ v·∫•n ƒë·ªÅ!');
    }

    // 5. D·ªçn d·∫πp
    await Product.findByIdAndDelete(savedProduct._id);
    await Order.findByIdAndDelete(savedOrder._id);
    console.log('üßπ ƒê√£ d·ªçn d·∫πp d·ªØ li·ªáu test');

  } catch (error) {
    console.error('‚ùå L·ªói test:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîö K·∫øt th√∫c test');
  }
}

// Ch·∫°y test
testStockLogic();
